{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","LocalStream","SettingForm","StreamRooms","Buttons","StreamRoom","id","user","uid","ClientSettings","setSettings","handleChange","name","event","settings","target","value","htmlFor","type","onChange","App","useState","localUser","setLocalUser","remoteUsers","setRemoteUsers","client","setClient","appID","channel","token","join","useCallback","a","AgoraRTC","createClient","mode","codec","on","currUsers","find","I","mediaType","toast","info","subscribe","videoTrack","play","toString","audioTrack","warning","filter","appId","createMicrophoneAudioTrack","createCameraVideoTrack","publish","error","message","leave","close","show","setEnabled","hide","unpublish","mute","unmute","useAgroaClient","position","onClick","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a1e2bea.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport AgoraRTC from 'agora-rtc-sdk-ng'\nimport styled from 'styled-components'\n\nimport 'react-toastify/dist/ReactToastify.css'\n\nconst Wrapper = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst LocalStream = styled.div`\n  width: 180px;\n  height: 120px;\n`\n\nconst SettingForm = styled.div`\n  label {\n    display: block;\n  }\n`\n\nconst StreamRooms = styled.div`\n  display: flex;\n`\n\nconst Buttons = styled.div`\n  margin-top: 6px;\n  display: flex;\n  justify-content: center;\n\n  button + button {\n    margin-left: 6px;\n  }\n`\n\nconst StreamRoom = ({ id, user }) => {\n  const uid = id || user.uid\n  return (\n    <div>\n      {user && <p>uid: {uid}</p>}\n      <LocalStream id={uid} />\n    </div>\n  )\n}\n\nconst ClientSettings = ({ setSettings }) => {\n  const handleChange = name => event =>\n    setSettings(settings => ({ ...settings, [name]: event.target.value }))\n\n  return (\n    <SettingForm>\n      <div>\n        <label htmlFor=\"appId\">appId</label>\n        <input\n          id=\"appId\"\n          type=\"text\"\n          name=\"appId\"\n          onChange={handleChange('appId')}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"channel\">Channel</label>\n        <input\n          id=\"channel\"\n          type=\"text\"\n          name=\"channel\"\n          onChange={handleChange('channel')}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"token\">Token</label>\n        <input\n          id=\"token\"\n          type=\"text\"\n          name=\"token\"\n          onChange={handleChange('token')}\n        />\n      </div>\n    </SettingForm>\n  )\n}\n\nconst useAgroaClient = ({\n  client,\n  localUser,\n  settings,\n  setLocalUser,\n  setClient,\n  setRemoteUsers\n}) => {\n  const join = useCallback(async () => {\n    const client = AgoraRTC.createClient({\n      mode: 'rtc',\n      codec: 'h264'\n    })\n\n    // remote publish\n    client.on('user-joined', async user => {\n      // Initiate the subscription\n      // await client.subscribe(user, mediaType)\n      setRemoteUsers(currUsers => {\n        // only add non exist users\n        if (!currUsers.find(I => I.uid === user.uid)) {\n          return [...currUsers, user]\n        } else {\n          return currUsers\n        }\n      })\n    })\n\n    // remote publish\n    client.on('user-published', async (user, mediaType) => {\n      toast.info(`user-published: ${user.uid} ${mediaType}`)\n      // Initiate the subscription\n      await client.subscribe(user, mediaType)\n      // setRemoteUsers(currUsers => [...currUsers])\n      if (mediaType === 'video') {\n        user.videoTrack.play(user.uid.toString())\n      } else if (mediaType === 'audio') {\n        user.audioTrack.play()\n      }\n    })\n\n    // remote user unpublished\n    client.on('user-unpublished', async (user, mediaType) => {\n      toast.warning(`user-unpublished: ${user.uid} ${mediaType}`)\n    })\n\n    // remote user unpublished\n    client.on('user-left', async (user, mediaType) => {\n      setRemoteUsers(currUsers => currUsers.filter(I => I.uid !== user.uid))\n    })\n\n    try {\n      const { appId, channel, token } = settings\n      const uid = await client.join(appId, channel, token)\n      const audioTrack = await AgoraRTC.createMicrophoneAudioTrack()\n      const videoTrack = await AgoraRTC.createCameraVideoTrack()\n\n      videoTrack.play('local-user')\n      setLocalUser({ uid, audioTrack, videoTrack })\n\n      await client.publish([audioTrack, videoTrack])\n      toast.info('join channel success!')\n      setClient(client)\n      return client\n    } catch (e) {\n      /* handle error */\n      toast.error(e?.message)\n      return {}\n    }\n  }, [setClient, setLocalUser, setRemoteUsers, settings])\n\n  const leave = useCallback(async () => {\n    try {\n      localUser.audioTrack.close()\n      localUser.videoTrack.close()\n      setClient(null)\n      setLocalUser(null)\n      setRemoteUsers([])\n      await client.leave()\n    } catch (e) {\n      /* handle error */\n      toast.error(e?.message)\n    }\n  }, [localUser, setClient, setLocalUser, setRemoteUsers, client])\n\n  const show = useCallback(async () => {\n    try {\n      await localUser.videoTrack.setEnabled(true)\n      return client.publish([localUser.videoTrack])\n    } catch (e) {\n      /* handle error */\n      toast.error(e?.message)\n    }\n  }, [localUser, client])\n\n  const hide = useCallback(async () => {\n    try {\n      await localUser.videoTrack.setEnabled(false)\n      return client.unpublish([localUser.videoTrack])\n    } catch (e) {\n      toast.error(e?.message)\n    }\n  }, [localUser, client])\n\n  const mute = useCallback(async () => {\n    try {\n      return client.unpublish([localUser.audioTrack])\n    } catch (e) {\n      /* handle error */\n      toast.error(e?.message)\n    }\n  }, [localUser, client])\n\n  const unmute = useCallback(async () => {\n    try {\n      return client.publish([localUser.audioTrack])\n    } catch (e) {\n      /* handle error */\n      toast.error(e?.message)\n    }\n  }, [localUser, client])\n\n  return {\n    join,\n    leave,\n    show,\n    hide,\n    mute,\n    unmute\n  }\n}\n\nconst App = () => {\n  const [localUser, setLocalUser] = useState()\n  const [remoteUsers, setRemoteUsers] = useState([])\n  const [client, setClient] = useState()\n  const [settings, setSettings] = useState({\n    appID: '',\n    channel: '',\n    token: ''\n  })\n\n  const { join, leave, show, hide, mute, unmute } = useAgroaClient({\n    client,\n    localUser,\n    settings,\n    setLocalUser,\n    setClient,\n    setRemoteUsers\n  })\n\n  return (\n    <Wrapper>\n      <ToastContainer position=\"bottom-left\" />\n      <h1>Run The World</h1>\n      <ClientSettings setSettings={setSettings} />\n      <Buttons>\n        {!client ? (\n          <button onClick={join}>Join</button>\n        ) : (\n          <>\n            <button onClick={leave}>Leave</button>\n            <button onClick={show}>Show</button>\n            <button onClick={hide}>Hide</button>\n            <button onClick={mute}>Mute</button>\n            <button onClick={unmute}>Unmute</button>\n          </>\n        )}\n      </Buttons>\n      <StreamRooms>\n        <StreamRoom id=\"local-user\" user={localUser} />\n        {remoteUsers?.map(user => (\n          <StreamRoom key={user.uid} user={user} />\n        ))}\n      </StreamRooms>\n    </Wrapper>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}