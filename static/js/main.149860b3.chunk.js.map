{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["LocalStream","styled","div","SettingForm","StreamRooms","join","settings","setRemoteUsers","a","client","AgoraRTC","createClient","mode","codec","on","user","mediaType","console","log","subscribe","currUsers","find","I","uid","hasVideo","hasAudio","filter","appId","channel","token","createMicrophoneAudioTrack","audioTrack","createCameraVideoTrack","videoTrack","publish","toast","info","error","message","StreamRoom","useEffect","play","toString","e","id","ClientSettings","setSettings","handleChange","name","event","target","value","htmlFor","type","onChange","App","useState","remoteUsers","clientStatus","setClientStatus","appID","localUser","leave","close","unpublish","mute","unmute","className","onClick","status","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.149860b3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport AgoraRTC from 'agora-rtc-sdk-ng'\nimport styled from 'styled-components'\n\nimport 'react-toastify/dist/ReactToastify.css'\nimport './App.css'\n\nconst LocalStream = styled.div`\n  width: 180px;\n  height: 120px;\n`\n\nconst SettingForm = styled.div`\n  label {\n    display: block;\n  }\n`\n\nconst StreamRooms = styled.div`\n  display: flex;\n`\n\n// Options for joining a channel\n// const options = {\n//   appID: 'b09b71cce3ea499a80e7e94c9abae12e',\n//   channel: 'runTheWorld',\n//   uid: null,\n//   token:\n//     '006ed1ec7534a41423faea1f5a3ccd04399IABZqWtmG/8C0MsRljAYu57oVqrjsyK657NiC4UzlwzI+znmkEUAAAAAEABJgS3VXbqnXwEAAQBcuqdf'\n// }\n\nconst join = async (settings, setRemoteUsers) => {\n  const client = AgoraRTC.createClient({\n    mode: 'rtc',\n    codec: 'h264'\n  })\n\n  // remote publish\n  client.on('user-published', async (user, mediaType) => {\n    console.log('user-published: ', user)\n    console.log(user)\n    // Initiate the subscription\n    await client.subscribe(user, mediaType)\n    setRemoteUsers(currUsers => {\n      // only add non exist users\n      if (!currUsers.find(I => I.uid === user.uid)) {\n        return [...currUsers, user]\n      } else {\n        return currUsers\n      }\n    })\n  })\n\n  // remote user unpublished\n  client.on('user-unpublished', async (user, mediaType) => {\n    console.log('user-unpublished: ', user)\n    // Initiate the subscription\n    console.log('unpublish!!!!!!!!!!!!!')\n    console.log(mediaType)\n    console.log('vidoe: ', user.hasVideo)\n    console.log('audio: ', user.hasAudio)\n    setRemoteUsers(currUsers => currUsers.filter(I => I.uid !== user.uid))\n  })\n\n  try {\n    const { appId, channel, token } = settings\n    const uid = await client.join(appId, channel, token)\n    const audioTrack = await AgoraRTC.createMicrophoneAudioTrack()\n    const videoTrack = await AgoraRTC.createCameraVideoTrack()\n\n    const user = { uid, audioTrack, videoTrack }\n    await client.publish([audioTrack, videoTrack])\n    toast.info('join channel success!')\n    return { client, user }\n  } catch (e) {\n    /* handle error */\n    toast.error(e.message)\n    return {}\n  }\n}\n\nconst StreamRoom = ({ user }) => {\n  useEffect(() => {\n    console.log(user)\n    try {\n      user.audioTrack?.play()\n      user.videoTrack?.play(user.uid.toString())\n    } catch (e) {\n      /* handle error */\n      console.log(e)\n    }\n  }, [])\n  const { uid } = user\n  return (\n    <div>\n      <p>uid: {uid}</p>\n      <LocalStream id={uid} />\n    </div>\n  )\n}\n\nconst ClientSettings = ({ setSettings }) => {\n  const handleChange = name => event =>\n    setSettings(settings => ({ ...settings, [name]: event.target.value }))\n\n  return (\n    <SettingForm>\n      <div>\n        <label htmlFor=\"appId\">appId</label>\n        <input\n          id=\"appId\"\n          type=\"text\"\n          name=\"appId\"\n          onChange={handleChange('appId')}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"channel\">Channel</label>\n        <input\n          id=\"channel\"\n          type=\"text\"\n          name=\"channel\"\n          onChange={handleChange('channel')}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"token\">Token</label>\n        <input\n          id=\"token\"\n          type=\"text\"\n          name=\"token\"\n          onChange={handleChange('token')}\n        />\n      </div>\n    </SettingForm>\n  )\n}\n\nconst App = () => {\n  const [remoteUsers, setRemoteUsers] = useState([])\n  const [clientStatus, setClientStatus] = useState({})\n  const [settings, setSettings] = useState({\n    appID: 'b09b71cce3ea499a80e7e94c9abae12e',\n    channel: 'runTheWorld',\n    token:\n      '006ed1ec7534a41423faea1f5a3ccd04399IABZqWtmG/8C0MsRljAYu57oVqrjsyK657NiC4UzlwzI+znmkEUAAAAAEABJgS3VXbqnXwEAAQBcuqdf'\n  })\n\n  const { client, user: localUser } = clientStatus\n\n  const leave = async (client, user) => {\n    user.audioTrack.close()\n    user.videoTrack.close()\n    setClientStatus(I => ({ ...I, user: null }))\n    setRemoteUsers([])\n    await client.leave()\n  }\n\n  const publish = async (client, user) => {\n    return client.publish([user.audioTrack, user.videoTrack])\n  }\n\n  const unpublish = async (client, user) => {\n    return client.unpublish([user.audioTrack, user.videoTrack])\n  }\n\n  const mute = async (client, user) => {\n    return client.unpublish([user.audioTrack])\n  }\n\n  const unmute = async (client, user) => {\n    return client.publish([user.audioTrack])\n  }\n\n  console.log(localUser)\n\n  return (\n    <div className=\"App\">\n      <ToastContainer />\n      <ClientSettings setSettings={setSettings} />\n      <button\n        onClick={async () => {\n          const status = await join(settings, setRemoteUsers)\n          setClientStatus(status)\n        }}>\n        Join\n      </button>\n      <button onClick={() => leave(client, localUser)}>Leave</button>\n      {client && (\n        <>\n          <button onClick={() => unpublish(client, localUser)}>\n            Unpublish\n          </button>\n          <button onClick={() => publish(client, localUser)}>Publish</button>\n          <button onClick={() => mute(client, localUser)}>Mute</button>\n          <button onClick={() => unmute(client, localUser)}>Unmute</button>\n        </>\n      )}\n      <StreamRooms>\n        {localUser && <StreamRoom user={localUser} />}\n        {remoteUsers?.map(user => (\n          <StreamRoom key={user.uid} user={user} />\n        ))}\n      </StreamRooms>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}