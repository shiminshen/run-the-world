{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["LocalStream","styled","div","options","appID","channel","uid","token","join","a","client","AgoraRTC","createClient","mode","codec","appId","createMicrophoneAudioTrack","audioTrack","createCameraVideoTrack","videoTrack","user","publish","StreamRoom","useEffect","play","toString","id","App","useState","clientStatus","setClientStatus","localUser","remoteUsers","setRemoteUsers","on","mediaType","console","log","subscribe","currUsers","find","I","filter","useRoomUsers","leave","close","originStatus","className","onClick","status","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e17acea.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport AgoraRTC from 'agora-rtc-sdk-ng'\nimport styled from 'styled-components'\n\nimport './App.css'\n\nconst LocalStream = styled.div`\n  width: 180px;\n  height: 120px;\n`\n\n// Options for joining a channel\nconst options = {\n  appID: 'b09b71cce3ea499a80e7e94c9abae12e',\n  channel: 'runTheWorld',\n  uid: null,\n  token:\n    '006ed1ec7534a41423faea1f5a3ccd04399IABZqWtmG/8C0MsRljAYu57oVqrjsyK657NiC4UzlwzI+znmkEUAAAAAEABJgS3VXbqnXwEAAQBcuqdf'\n}\n\nconst join = async () => {\n  const client = AgoraRTC.createClient({\n    mode: 'rtc',\n    codec: 'h264'\n  })\n  const uid = await client.join(options.appId, options.channel, options.token)\n  const audioTrack = await AgoraRTC.createMicrophoneAudioTrack()\n  const videoTrack = await AgoraRTC.createCameraVideoTrack()\n  const user = { uid, audioTrack, videoTrack }\n\n  await client.publish([audioTrack, videoTrack])\n  return { client, user }\n}\n\nconst useRoomUsers = client => {\n  const [remoteUsers, setRemoteUsers] = useState([])\n\n  useEffect(() => {\n    if (!client) {\n      return\n    }\n\n    client.on('user-added', async (user, mediaType) => {\n      console.log('user-subscribed: ', user)\n      // Initiate the subscription\n      await client.subscribe(user, mediaType)\n      setRemoteUsers(currUsers => {\n        // only add non exist users\n        if (!currUsers.find(I => I.uid === user.uid)) {\n          return [...currUsers, user]\n        } else {\n          return currUsers\n        }\n      })\n    })\n\n    // remote publish\n    client.on('user-published', async (user, mediaType) => {\n      console.log('user-published: ', user)\n      console.log(user)\n      // Initiate the subscription\n      await client.subscribe(user, mediaType)\n      setRemoteUsers(currUsers => {\n        // only add non exist users\n        if (!currUsers.find(I => I.uid === user.uid)) {\n          return [...currUsers, user]\n        } else {\n          return currUsers\n        }\n      })\n    })\n\n    // remote user unpublished\n    client.on('user-unpublished', async (user, mediaType) => {\n      console.log('user-unpublished: ', user)\n      // Initiate the subscription\n      setRemoteUsers(currUsers => currUsers.filter(I => I.uid !== user.uid))\n    })\n  }, [client])\n\n  return { localUser: client, remoteUsers }\n}\n\nconst StreamRoom = ({ user }) => {\n  useEffect(() => {\n    // track not exist in users of client in first joined\n    user.audioTrack.play()\n    user.videoTrack.play(user.uid.toString())\n  }, [])\n  const { uid } = user\n  return (\n    <div>\n      <p>uid: {uid}</p>\n      <LocalStream id={uid} />\n    </div>\n  )\n}\n\nconst App = () => {\n  const [clientStatus, setClientStatus] = useState({})\n  const { client, user: localUser } = clientStatus\n  const { remoteUsers } = useRoomUsers(client)\n\n  const leave = async (client, user) => {\n    user.audioTrack.close()\n    user.videoTrack.close()\n    setClientStatus(originStatus => ({ ...originStatus, user: null }))\n    await client.leave()\n  }\n\n  return (\n    <div className=\"App\">\n      <button\n        onClick={async () => {\n          const status = await join()\n          setClientStatus(status)\n        }}>\n        Join\n      </button>\n      <button onClick={() => leave(client, localUser)}>Leave</button>\n      {localUser && <StreamRoom user={localUser} />}\n      {remoteUsers?.map(user => (\n        <StreamRoom key={user.uid} user={user} />\n      ))}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}